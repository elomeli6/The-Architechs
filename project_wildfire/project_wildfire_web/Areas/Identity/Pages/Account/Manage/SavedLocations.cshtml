@page
@model SavedLocationModel

<h2>Saved Locations</h2>

<table class="table">
    <thead>
        <tr>
            <th>Title</th>
            <th>Latitude</th>
            <th>Longitude</th>
            <th>Address</th>
            <th>Notification Radius (mi)</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var location in Model.UserLocations)
        {
            <tr>
                <td>@location.Title</td>
                <td>@location.Latitude</td>
                <td>@location.Longitude</td>
                <td>@location.Address</td>
                <td>@location.NotificationRadius</td>
                <td>
                    <form method="post" asp-action="DeleteUserLocation" asp-route-id="@location.Id" onsubmit="return confirm('Are you sure you want to delete this location?');">
                        <button type="submit" class="btn btn-danger btn-sm">Delete</button>
                    </form>
                </td>
            </tr>
        }
    </tbody>
</table>

<hr />

<h3>Add New Location</h3>
<form method="post" asp-action="PostUserLocation" asp-controller="UserLocation">
    <div class="form-group">
        <label>Title</label>
        <input type="text" name="Title" class="form-control" required />
    </div>
    <div class="form-group">
        <label>Latitude</label>
        <input type="text" name="Latitude" class="form-control" required />
    </div>
    <div class="form-group">
        <label>Longitude</label>
        <input type="text" name="Longitude" class="form-control" required />
    </div>
    <div class="form-group">
        <label>Address</label>
        <input type="text" name="Address" class="form-control" />
    </div>
    <div class="form-group">
        <label>Notification Radius (mi)</label>
        <input type="number" name="NotificationRadius" class="form-control" required />
    </div>
    <br />
    <button type="submit" class="btn btn-primary">Add Location</button>
</form>


@section Scripts {
<script>
    const userId = '@User.FindFirst("sub")?.Value';

    async function loadUserLocations() {
        const response = await fetch(`/api/UserLocation/${userId}`);
        const locations = await response.json();
        const tbody = document.getElementById("locationsTableBody");
        tbody.innerHTML = "";

        locations.forEach(location => {
            const row = document.createElement("tr");
            row.innerHTML = `
                <td>${location.title}</td>
                <td>${location.latitude}</td>
                <td>${location.longitude}</td>
                <td>${location.address ?? ""}</td>
                <td>${location.notificationRadius}</td>
                <td>
                    <button class="btn btn-warning btn-sm" onclick="editLocation(${location.id})">Edit</button>
                    <button class="btn btn-danger btn-sm" onclick="deleteLocation(${location.id})">Delete</button>
                </td>
            `;
            tbody.appendChild(row);
        });
    }

    document.getElementById('addLocationBtn').addEventListener('click', async () => {
        const title = document.getElementById('title').value;
        const latitude = parseFloat(document.getElementById('latitude').value);
        const longitude = parseFloat(document.getElementById('longitude').value);
        const address = document.getElementById('address').value;
        const radius = parseInt(document.getElementById('radius').value);

        const location = {
            Title: title,
            Latitude: latitude,
            Longitude: longitude,
            Address: address,
            NotificationRadius: radius,
            UserId: userId
        };

        const response = await fetch('/api/UserLocation', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(location)
        });

        const statusDiv = document.getElementById('statusMessage');
        if (response.ok) {
            statusDiv.textContent = '‚úÖ Location added successfully!';
            clearForm();
            await loadUserLocations(); // Refresh table
        } else {
            statusDiv.textContent = '‚ùå Failed to add location.';
        }
    });

    function clearForm() {
        document.getElementById('title').value = '';
        document.getElementById('latitude').value = '';
        document.getElementById('longitude').value = '';
        document.getElementById('address').value = '';
        document.getElementById('radius').value = '';
    }

    async function deleteLocation(id) {
        if (!confirm("Are you sure you want to delete this location?")) return;

        const response = await fetch(`/api/UserLocation/${id}`, {
            method: 'DELETE'
        });

        if (response.ok) {
            await loadUserLocations(); // Refresh table
        }
    }

    function editLocation(id) {
        alert(`üõ† Edit functionality coming soon for ID ${id}`);
        // We'll build a modal or inline edit next!
    }

    // Load the user's saved locations when the page loads
    window.onload = loadUserLocations;
</script>
}
